//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""72194ec1-4639-497b-8af1-57daa402689b"",
            ""actions"": [
                {
                    ""name"": ""MovementDir"",
                    ""type"": ""Value"",
                    ""id"": ""9e002a9f-1784-408d-8c21-fca5e8742f41"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9b21edab-f821-4037-91e2-62e8736c844f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Dir"",
                    ""id"": ""e6d22f7b-3b4c-4467-9c1f-42f025bcbea6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""faee6866-9faf-4dcc-b07b-48826308ed1c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MovementDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f5f7b24a-e386-40c8-8404-f4281ca079c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MovementDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd837a75-4204-4679-9ab8-967241ba4489"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MovementDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09af52c5-05f1-4fef-b49c-e5ceeb8480bf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MovementDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""85a9ba0a-ac6a-4cf5-a129-a3207a590d17"",
                    ""path"": ""<Mouse>/{Point}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerButtons"",
            ""id"": ""64ad374b-ce4b-4eba-a8da-a64b7c61daf8"",
            ""actions"": [
                {
                    ""name"": ""Spit"",
                    ""type"": ""Button"",
                    ""id"": ""7b3bd4d0-f04b-4d9d-a0b0-9f0603e88e23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""c73ea46c-a3eb-41e5-b8d5-27cd3854b977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0693eacf-cb8f-4b0b-b60f-9195e4241294"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97523cd7-0ccc-43b7-9256-1df5ff3fa302"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>/{Hatswitch}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>/{Back}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_MovementDir = m_PlayerMovement.FindAction("MovementDir", throwIfNotFound: true);
        m_PlayerMovement_MousePosition = m_PlayerMovement.FindAction("MousePosition", throwIfNotFound: true);
        // PlayerButtons
        m_PlayerButtons = asset.FindActionMap("PlayerButtons", throwIfNotFound: true);
        m_PlayerButtons_Spit = m_PlayerButtons.FindAction("Spit", throwIfNotFound: true);
        m_PlayerButtons_SpecialAttack = m_PlayerButtons.FindAction("SpecialAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_MovementDir;
    private readonly InputAction m_PlayerMovement_MousePosition;
    public struct PlayerMovementActions
    {
        private @GameInput m_Wrapper;
        public PlayerMovementActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementDir => m_Wrapper.m_PlayerMovement_MovementDir;
        public InputAction @MousePosition => m_Wrapper.m_PlayerMovement_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @MovementDir.started += instance.OnMovementDir;
            @MovementDir.performed += instance.OnMovementDir;
            @MovementDir.canceled += instance.OnMovementDir;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @MovementDir.started -= instance.OnMovementDir;
            @MovementDir.performed -= instance.OnMovementDir;
            @MovementDir.canceled -= instance.OnMovementDir;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerButtons
    private readonly InputActionMap m_PlayerButtons;
    private List<IPlayerButtonsActions> m_PlayerButtonsActionsCallbackInterfaces = new List<IPlayerButtonsActions>();
    private readonly InputAction m_PlayerButtons_Spit;
    private readonly InputAction m_PlayerButtons_SpecialAttack;
    public struct PlayerButtonsActions
    {
        private @GameInput m_Wrapper;
        public PlayerButtonsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spit => m_Wrapper.m_PlayerButtons_Spit;
        public InputAction @SpecialAttack => m_Wrapper.m_PlayerButtons_SpecialAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerButtons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerButtonsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerButtonsActionsCallbackInterfaces.Add(instance);
            @Spit.started += instance.OnSpit;
            @Spit.performed += instance.OnSpit;
            @Spit.canceled += instance.OnSpit;
            @SpecialAttack.started += instance.OnSpecialAttack;
            @SpecialAttack.performed += instance.OnSpecialAttack;
            @SpecialAttack.canceled += instance.OnSpecialAttack;
        }

        private void UnregisterCallbacks(IPlayerButtonsActions instance)
        {
            @Spit.started -= instance.OnSpit;
            @Spit.performed -= instance.OnSpit;
            @Spit.canceled -= instance.OnSpit;
            @SpecialAttack.started -= instance.OnSpecialAttack;
            @SpecialAttack.performed -= instance.OnSpecialAttack;
            @SpecialAttack.canceled -= instance.OnSpecialAttack;
        }

        public void RemoveCallbacks(IPlayerButtonsActions instance)
        {
            if (m_Wrapper.m_PlayerButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerButtonsActions @PlayerButtons => new PlayerButtonsActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovementDir(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IPlayerButtonsActions
    {
        void OnSpit(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
    }
}
